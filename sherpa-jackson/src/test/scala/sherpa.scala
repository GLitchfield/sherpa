//  __..              
// (__ |_  _ ._.._  _.
// .__)[ )(/,[  [_)(_]
//              |     
//
//  (c) 2012, Alois Cochard
package sherpa 
package serializer

import org.specs2.mutable._

import sherpa.serializer.jackson._

case class Person(name: String, age: Int, emails: Seq[String]) // TODO Fix failure with List
object Person { val mapper = Mapper[Person] }

class JacksonSpec extends Specification {

  "sherpa-jackson" should {

    "support syntax on mapper" in {
      import Person.mapper._
      val alois = Person("Alois Cochard", 27, List("alois.cochard@gmail.com", "alois.cochard@opencredo.com"))
      parse(generate(alois)) mustEqual Right(alois)
    }

    "support syntax on serializer" in {
      import Person.mapper._
      val alois = Person("Alois Cochard", 27, List("alois.cochard@gmail.com", "alois.cochard@opencredo.com"))
      Jackson.parse[Person](Jackson.generate(alois)) mustEqual Right(alois)
    }

  }
}

// CODE GENERATED BY MACRO
/*
  new Persistable[T, EntityGenerator[String], EntityExtractor[String]] {
    implicit val writer = Writer(person => _.writeObject { fs => 
      for {
        name <- fs.writeField("name")(_.write(person.name))
        age <- fs.writeField("age")(_.write(person.age))
        emails <- fs.writeField("emails")(_.write(person.emails))
      } yield Unit
    })

    implicit val reader = Reader(_.readObject { fs =>
      for {
        name <- fs.readField("name")(_.read[String])
        age <- fs.readField("age")(_.read[Int])
        emails <- fs.readField("emails")(_.read[Seq[String]])
      } yield Person(name, age)
    })
  }
*/
